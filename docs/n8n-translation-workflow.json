{
  "name": "n8n translation workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-csv",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "05550f62-830f-4a73-9f8f-e32376e64061",
      "name": "Webhook Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2540,
        -40
      ],
      "webhookId": "aad97a86-5707-4d8c-8231-3398f57b2642"
    },
    {
      "parameters": {
        "binaryPropertyName": "file",
        "options": {}
      },
      "id": "1c557099-c628-459d-b047-b5110dffe8e4",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2320,
        -40
      ]
    },
    {
      "parameters": {
        "jsCode": "// CSV 數據結構驗證\nconst items = $input.all();\ntry {\n  if (!items || items.length === 0) throw new Error('CSV 檔案解析失敗：無法讀取檔案內容');\n  const requiredColumns = ['zh-TW','en','前後端','模組','zh-CN'];\n  const firstItem = items[0];\n  if (!firstItem.json) throw new Error('CSV 格式錯誤：無法解析數據');\n  \n  // 調試：顯示實際的欄位名稱\n  const actualColumns = Object.keys(firstItem.json);\n  console.log('實際 CSV 欄位:', actualColumns);\n  console.log('需要的欄位:', requiredColumns);\n  \n  // 清理欄位名稱（移除 BOM、空格等）\n  const cleanActualColumns = actualColumns.map(col => col.replace(/^\\uFEFF/, '').trim());\n  console.log('清理後的實際欄位:', cleanActualColumns);\n  \n  // 檢查每個必要欄位\n  const missingColumns = [];\n  for (const column of requiredColumns) {\n    const found = cleanActualColumns.includes(column) || actualColumns.includes(column);\n    if (!found) {\n      missingColumns.push(column);\n    }\n  }\n  \n  if (missingColumns.length > 0) {\n    throw new Error(`CSV 格式錯誤：缺少必要欄位 [${missingColumns.join(', ')}]。\n    實際欄位: [${actualColumns.join(', ')}]`);\n  }\n  \n  if (items.length < 2) throw new Error('CSV 數據不足：至少需要包含標題行和一行數據');\n  \n  let validRowCount = 0;\n  for (const item of items) {\n    const zhTW = item.json['zh-TW'];\n    const en = item.json['en'];\n    if (zhTW && zhTW.trim() && en && en.trim()) validRowCount++;\n  }\n  \n  if (validRowCount === 0) throw new Error('CSV 數據錯誤：未找到有效的翻譯對');\n  \n  return items;\n} catch (error) {\n  return [{ json: { error: true, message: error.message ?? 'csv 格式錯誤', code: 'CSV_VALIDATION_ERROR' } }];\n}"
      },
      "id": "2fc6d3b3-8bd7-4643-b426-78da7c6eeeb2",
      "name": "Validate CSV Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2100,
        -40
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              },
              "id": "1759194f-5421-4f8d-8353-545dd3f278b1"
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "2bfdd671-2484-412e-8cbe-beffa49811ae",
      "name": "IF CSV Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1880,
        -40
      ]
    },
    {
      "parameters": {
        "functionCode": "// 分類翻譯\ntry {\n  const input = items.map(item => item.json);\n  if (!input || input.length === 0) throw new Error('沒有可處理的翻譯數據');\n  const groupMap = new Map();\n  for (const row of input) {\n    if (!row['zh-TW'] || !row['en']) continue;\n    const zh = row['zh-TW'];\n    if (!groupMap.has(zh)) groupMap.set(zh, []);\n    groupMap.get(zh).push(row);\n  }\n  const consistentRows = [], inconsistentRows = [];\n  for (const [zh, rows] of groupMap.entries()) {\n    const enSet = new Set(rows.map(r => r['en']));\n    (enSet.size === 1 ? consistentRows : inconsistentRows).push(...rows);\n  }\n  return [ { json: { rows: consistentRows } }, { json: { rows: inconsistentRows } } ];\n} catch (error) {\n  return [{ json: { error: true, message: `翻譯分類處理錯誤: ${error.message}`, code: 'CLASSIFICATION_ERROR' } }];\n}"
      },
      "id": "c5af8904-80eb-426f-b204-fbd98682cf77",
      "name": "Classify Translations",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1660,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "const errorMessage = $input.first().json.message;\nconst errorCode = $input.first().json.code;\n\n// 產生錯誤 HTML\nconst errorHtml = `\n<html>\n  <head>\n    <style>\n      body {\n        font-family: 'Segoe UI', 'Microsoft JhengHei', sans-serif;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        margin: 0;\n        padding: 0 20px;\n        background-color: #f5f7fa;\n        min-height: 100vh;\n      }\n      .container {\n        text-align: center;\n        max-width: 600px;\n        width: 100%;\n        padding: 30px;\n        background-color: white;\n        border-radius: 12px;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        box-sizing: border-box;\n      }\n      .error-icon {\n        font-size: 4rem;\n        color: #e74c3c;\n        margin-bottom: 20px;\n      }\n      h2 {\n        color: #e74c3c;\n        margin-bottom: 15px;\n        font-size: 1.8rem;\n      }\n      .error-message {\n        color: #2c3e50;\n        font-size: 1.1rem;\n        line-height: 1.6;\n        margin-bottom: 20px;\n      }\n      .error-code {\n        color: #7f8c8d;\n        font-size: 0.9rem;\n        font-family: monospace;\n        background-color: #ecf0f1;\n        padding: 8px 12px;\n        border-radius: 4px;\n        margin-top: 15px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"error-icon\">⚠️</div>\n      <h2>處理失敗</h2>\n      <div class=\"error-message\">${errorMessage}</div>\n    </div>\n  </body>\n</html>\n`;\n\nconst parsedHtml = JSON.stringify(errorHtml)\n\n// 回傳 JSON 格式\nreturn [{\n  json: {\n    success: false,\n    html: parsedHtml\n  }\n}];"
      },
      "id": "7b436200-d5fd-449a-b36a-43e4df178d9b",
      "name": "Return Error HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1660,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "return items[0].json.rows.map(row => ({ json: row }))\n"
      },
      "id": "d640bf38-85ea-47ea-b621-6fbfadb15284",
      "name": "Split Consistent Rows",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        -260
      ]
    },
    {
      "parameters": {
        "jsCode": "return items[1].json.rows.map(row => ({ json: row }))\n"
      },
      "id": "b30b9fec-f847-4c76-95f6-6a16883ead28",
      "name": "Split Inconsistent Rows",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        -40
      ]
    },
    {
      "parameters": {
        "options": {
          "fileName": "consistent.csv",
          "headerRow": true
        }
      },
      "id": "5d798fb2-e854-4073-9b49-7c48f50e7289",
      "name": "Convert to Consistent CSV",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1,
      "position": [
        -1220,
        -260
      ]
    },
    {
      "parameters": {
        "options": {
          "fileName": "inconsistent.csv",
          "headerRow": true
        }
      },
      "id": "de6b8801-ef48-426b-98cf-0965fbb834fc",
      "name": "Convert to Inconsistent CSV",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1,
      "position": [
        -1220,
        -40
      ]
    },
    {
      "parameters": {},
      "id": "1b5c22c2-0a17-4256-8f64-9f561780cae8",
      "name": "Merge CSV Files",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -1000,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// 找出含有特定關鍵字的檔案\nconst consistentFile = items.find(item => item.binary?.data?.fileName?.includes('consistent'));\nconst inconsistentFile = items.find(item => item.binary?.data?.fileName?.includes('inconsistent'));\n\n// 解析 CSV 並回傳行數\nconst parseCSVRowCount = (binaryData) => {\n  if (!binaryData || !binaryData.data) return 0;\n  const base64 = binaryData.data;\n  const csvContent = Buffer.from(base64, 'base64').toString('utf-8');\n  const lines = csvContent.split('\\n').filter(line => line.trim().length > 0);\n  return Math.max(0, lines.length - 1); // 減去標題行\n};\n\n// 計算筆數\nconst consistentCount = parseCSVRowCount(consistentFile?.binary?.data);\nconst inconsistentCount = parseCSVRowCount(inconsistentFile?.binary?.data);\nconst totalCount = consistentCount + inconsistentCount;\n\n// 產生下載按鈕 HTML\nconst downloadLinks = items.map(item => {\n  const binaryData = item.binary?.data;\n  const base64 = binaryData?.data || '';\n  const name = binaryData?.fileName || item.json?.fileName || 'unknown.csv';\n\n  // 除錯資訊\n  console.log('Binary data structure:', JSON.stringify(item.binary, null, 2));\n  console.log('Base64 length:', base64.length);\n  console.log('File name:', name);\n\n  return `\n    <div class=\"download-item\">\n      <a href=\"data:text/csv;base64,${base64}\" \n         download=\"${name}\" \n         class=\"download-btn\">\n         下載 ${name}\n      </a>\n    </div>`;\n});\n\n// 組成 HTML 字串\nconst html = `\n<html>\n  <head>\n    <style>\n      body {\n        font-family: 'Segoe UI', 'Microsoft JhengHei', sans-serif;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        margin: 0;\n        padding: 0 20px;\n        background-color: #f5f7fa;\n      }\n      .container {\n        text-align: center;\n        max-width: 600px;\n        width: 100%;\n        padding: 30px;\n        background-color: white;\n        border-radius: 12px;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        box-sizing: border-box;\n      }\n      h2 {\n        color: #2c3e50;\n        margin-bottom: 25px;\n        font-size: 1.8rem;\n      }\n      .download-item {\n        margin: 15px 0;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n      }\n      .download-btn {\n        display: inline-block;\n        width: 100%;\n        padding: 12px;\n        background-color: #3498db;\n        color: white;\n        text-decoration: none;\n        border-radius: 8px;\n        font-weight: 600;\n        transition: background-color 0.3s ease;\n      }\n      .download-btn:hover {\n        background-color: #2980b9;\n      }\n      .stats-container {\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div id=\"translation-stats\" class=\"stats-container\"\n           data-total=\"${totalCount}\"\n           data-inconsistent=\"${inconsistentCount}\"\n           data-consistent=\"${consistentCount}\">\n      </div>\n      ${downloadLinks.join('\\n')}\n    </div>\n  </body>\n</html>\n`;\n\nconst parsedHtml = JSON.stringify(html)\n\n// 回傳 HTML 結果與統計資料\nreturn [\n  {\n    json: {\n      parsedHtml,\n      stats: {\n        total: totalCount,\n        inconsistent: inconsistentCount,\n        consistent: consistentCount\n      }\n    }\n  }\n];\n"
      },
      "id": "4e278085-aeef-4a09-b3dd-22dc7fce30cd",
      "name": "Generate HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        -160
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={\n\"html\": {{ $json.parsedHtml }},\n\"stats\": {\n  \"total\":{{ $json.stats.total }},\n  \"inconsistent\":{{ $json.stats.inconsistent }},\n  \"consistent\":{{ $json.stats.consistent }}\n  },\n  \"success\": \"true\"\n}",
        "options": {}
      },
      "id": "de4f7519-fd76-4c15-b75a-3f8432782220",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -560,
        -160
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={\n\"html\": {{ $json.html }},\n\"success\": \"false\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1440,
        160
      ],
      "id": "d06d8951-c7c5-4a40-89d8-72eb9d79c545",
      "name": "Respond to Webhook2"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from File": {
      "main": [
        [
          {
            "node": "Validate CSV Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate CSV Content": {
      "main": [
        [
          {
            "node": "IF CSV Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF CSV Error": {
      "main": [
        [
          {
            "node": "Classify Translations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Error HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Translations": {
      "main": [
        [
          {
            "node": "Split Consistent Rows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Inconsistent Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Consistent Rows": {
      "main": [
        [
          {
            "node": "Convert to Consistent CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Inconsistent Rows": {
      "main": [
        [
          {
            "node": "Convert to Inconsistent CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Consistent CSV": {
      "main": [
        [
          {
            "node": "Merge CSV Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Inconsistent CSV": {
      "main": [
        [
          {
            "node": "Merge CSV Files",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge CSV Files": {
      "main": [
        [
          {
            "node": "Generate HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Error HTML": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Upload": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "58be2268-1a50-4f5c-8b48-ba614996e156",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7e9d16dc3fe413da898e49c0cf2354188b8e843a78a294f552f634cc74d7a007"
  },
  "id": "78x0jGHlwO1IktI9",
  "tags": []
}